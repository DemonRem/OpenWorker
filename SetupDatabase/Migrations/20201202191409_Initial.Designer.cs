// <auto-generated />
using System;
using Core.DatabaseSystem.Characters;
using Core.DatabaseSystem.Storages;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Migration.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace SetupDatabase.Migrations
{
    [DbContext(typeof(MigrationContext))]
    [Migration("20201202191409_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Core.DatabaseSystem.AccouintPosts.AccountPostModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModificationTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("account_post");
                });

            modelBuilder.Entity("Core.DatabaseSystem.Accounts.AccountModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastSelectedCharacter")
                        .HasColumnType("integer");

                    b.Property<string>("Mac")
                        .IsRequired()
                        .HasColumnType("CHAR(18)");

                    b.Property<DateTime>("ModificationTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("CHAR(64)");

                    b.Property<decimal>("SessionKey")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SoulCash")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.HasIndex("SessionKey");

                    b.ToTable("account");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastSelectedCharacter = -1,
                            Mac = "00-00-00-00-00-00",
                            ModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nickname = "sawich",
                            Password = "VaVWDzfVP8ot1N4QMr3D4bSicnxcr3DYCtfLMPcVr6/kFbPr2jxw2oKGc05UqeqPAuZPoRpyMh42cLNa3b88+g==",
                            SessionKey = 0m,
                            SoulCash = 0m
                        },
                        new
                        {
                            Id = 2L,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastSelectedCharacter = -1,
                            Mac = "00-00-00-00-00-00",
                            ModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nickname = "Leeroy",
                            Password = "VaVWDzfVP8ot1N4QMr3D4bSicnxcr3DYCtfLMPcVr6/kFbPr2jxw2oKGc05UqeqPAuZPoRpyMh42cLNa3b88+g==",
                            SessionKey = 0m,
                            SoulCash = 0m
                        },
                        new
                        {
                            Id = 3L,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastSelectedCharacter = -1,
                            Mac = "00-00-00-00-00-00",
                            ModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nickname = "Tweekly",
                            Password = "VaVWDzfVP8ot1N4QMr3D4bSicnxcr3DYCtfLMPcVr6/kFbPr2jxw2oKGc05UqeqPAuZPoRpyMh42cLNa3b88+g==",
                            SessionKey = 0m,
                            SoulCash = 0m
                        },
                        new
                        {
                            Id = 4L,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastSelectedCharacter = -1,
                            Mac = "00-00-00-00-00-00",
                            ModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nickname = "Chelsea",
                            Password = "VaVWDzfVP8ot1N4QMr3D4bSicnxcr3DYCtfLMPcVr6/kFbPr2jxw2oKGc05UqeqPAuZPoRpyMh42cLNa3b88+g==",
                            SessionKey = 0m,
                            SoulCash = 0m
                        },
                        new
                        {
                            Id = 5L,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastSelectedCharacter = -1,
                            Mac = "00-00-00-00-00-00",
                            ModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nickname = "Dez",
                            Password = "VaVWDzfVP8ot1N4QMr3D4bSicnxcr3DYCtfLMPcVr6/kFbPr2jxw2oKGc05UqeqPAuZPoRpyMh42cLNa3b88+g==",
                            SessionKey = 0m,
                            SoulCash = 0m
                        },
                        new
                        {
                            Id = 6L,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastSelectedCharacter = -1,
                            Mac = "00-00-00-00-00-00",
                            ModificationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nickname = "Godo",
                            Password = "VaVWDzfVP8ot1N4QMr3D4bSicnxcr3DYCtfLMPcVr6/kFbPr2jxw2oKGc05UqeqPAuZPoRpyMh42cLNa3b88+g==",
                            SessionKey = 0m,
                            SoulCash = 0m
                        });
                });

            modelBuilder.Entity("Core.DatabaseSystem.CharacterPosts.CharacterPostModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModificationTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("character_post");
                });

            modelBuilder.Entity("Core.DatabaseSystem.Characters.CharacterModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Advancement")
                        .HasColumnType("smallint");

                    b.Property<ApperanceModel>("Appearance")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<BankModel>("Bank")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Character")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<EnergyModel>("Energy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal>("Exp")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Gate")
                        .HasColumnType("integer");

                    b.Property<long[]>("Gesture")
                        .IsRequired()
                        .HasColumnType("bigint[]");

                    b.Property<InventoryModel>("Inventory")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<long[]>("LearnedSkill")
                        .IsRequired()
                        .HasColumnType("bigint[]");

                    b.Property<byte>("Level")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ModificationTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Portrait")
                        .HasColumnType("bigint");

                    b.Property<ProfileModel>("Profile")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<long[]>("QuickSlot")
                        .IsRequired()
                        .HasColumnType("bigint[]");

                    b.Property<long[]>("SkillSlot")
                        .IsRequired()
                        .HasColumnType("bigint[]");

                    b.Property<byte>("Slot")
                        .HasColumnType("smallint");

                    b.Property<StorageModel[]>("Storage")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<TitleModel>("Title")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<PositionModel>("WorldPosition")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("character");
                });

            modelBuilder.Entity("Core.DatabaseSystem.Guilds.GuildModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("ModificationTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.HasKey("Id");

                    b.ToTable("guild");
                });

            modelBuilder.Entity("Core.DatabaseSystem.Storages.StorageModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<string>("BroochSlots")
                        .IsRequired()
                        .HasColumnType("char(15)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<long>("Color")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Durability")
                        .HasColumnType("smallint");

                    b.Property<long>("DyeColor")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModificationTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("PrototypeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Quantly")
                        .HasColumnType("smallint");

                    b.Property<int>("SlotId")
                        .HasColumnType("integer");

                    b.Property<byte>("Slots")
                        .HasColumnType("smallint");

                    b.Property<StatModel[]>("Stats")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("StorageType")
                        .HasColumnType("integer");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<UpgradeModel>("Upgrade")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("storage");
                });

            modelBuilder.Entity("Core.DatabaseSystem.AccouintPosts.AccountPostModel", b =>
                {
                    b.HasOne("Core.DatabaseSystem.Accounts.AccountModel", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Core.DatabaseSystem.CharacterPosts.CharacterPostModel", b =>
                {
                    b.HasOne("Core.DatabaseSystem.Characters.CharacterModel", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Core.DatabaseSystem.Characters.CharacterModel", b =>
                {
                    b.HasOne("Core.DatabaseSystem.Accounts.AccountModel", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Core.DatabaseSystem.Storages.StorageModel", b =>
                {
                    b.HasOne("Core.DatabaseSystem.Characters.CharacterModel", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });
#pragma warning restore 612, 618
        }
    }
}
